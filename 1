#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
typedef struct Node {
    int key;
    int value;
    struct Node* prev;
    struct Node* next;
} Node;
typedef struct {
    int capacity;
    int size;
    Node* head;
    Node* tail;
    Node** map;
} LRUCache;
#define MAP_SIZE 10001
Node* createNode(int key, int value) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->value = value;
    node->prev = NULL;
    node->next = NULL;
    return node;
}
LRUCache* lRUCacheCreate(int capacity) {
    LRUCache* cache = (LRUCache*)malloc(sizeof(LRUCache));
    cache->capacity = capacity;
    cache->size = 0;
    cache->head = createNode(0, 0); // Dummy head
    cache->tail = createNode(0, 0); // Dummy tail
    cache->head->next = cache->tail;
    cache->tail->prev = cache->head;
    cache->map = (Node*)calloc(MAP_SIZE, sizeof(Node));
    return cache;
}
void removeNode(LRUCache* cache, Node* node) {
    Node* prev = node->prev;
    Node* next = node->next;
    prev->next = next;
    next->prev = prev;
}
void addNodeAfterHead(LRUCache* cache, Node* node) {
    node->next = cache->head->next;
    node->prev = cache->head;
    cache->head->next->prev = node;
    cache->head->next = node;
}
void moveToHead(LRUCache* cache, Node* node) {
    removeNode(cache, node);
    addNodeAfterHead(cache, node);
}
Node* removeTail(LRUCache* cache) {
    Node* tailNode = cache->tail->prev;
    removeNode(cache, tailNode);
    return tailNode;
}
int lRUCacheGet(LRUCache* cache, int key) {
    Node* node = cache->map[key];
    if (node == NULL) {
        return -1; // Key not found
    }
    moveToHead(cache, node);
    return node->value;
}
void lRUCachePut(LRUCache* cache, int key, int value) {
    Node* node = cache->map[key];
    if (node != NULL) {
        node->value = value;
        moveToHead(cache, node);
    } else {
        Node* newNode = createNode(key, value);
        cache->map[key] = newNode;
        addNodeAfterHead(cache, newNode);
        cache->size++;

        if (cache->size > cache->capacity) {
            Node* tailNode = removeTail(cache);
            cache->map[tailNode->key] = NULL;
            free(tailNode);
            cache->size--;
        }
    }
}
void lRUCacheFree(LRUCache* cache) {
    Node* current = cache->head;
    while (current != NULL) {
        Node* next = current->next;
        free(current);
        current = next;
    }
    free(cache->map);
    free(cache);
}
// Rename the conflicting main function in another file.
int test_main() {
    // Test code here
    return 0;
}
